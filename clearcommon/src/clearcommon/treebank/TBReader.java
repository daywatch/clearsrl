/**
* Copyright (c) 2007, Regents of the University of Colorado
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* Neither the name of the University of Colorado at Boulder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/
package clearcommon.treebank;

import clearcommon.util.JFileTokenizer;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

/**
 * TBReader reads a Treebank file, and returns each tree as TBTree format.

 * For example, here is the output generated by the following code.
 * <pre>
 * "wsj_0001.mrg":
 * ( (S 
 *   (NP-SBJ 
 *    (NP (NNP Pierre) (NNP Vinken) )
 *    (, ,) 
 *    (ADJP 
 *      (NP (CD 61) (NNS years) )
 *      (JJ old) )
 *    (, ,) )
 *  (VP (MD will) 
 *    (VP (VB join) 
 *      (NP (DT the) (NN board) )
 *      (PP-CLR (IN as) 
 *        (NP (DT a) (JJ nonexecutive) (NN director) ))
 *      (NP-TMP (NNP Nov.) (CD 29) )))
 *  (. .) ))
 * ( (S 
 *   (NP-SBJ (NNP Mr.) (NNP Vinken) )
 *   (VP (VBZ is) 
 *     (NP-PRD 
 *       (NP (NN chairman) )
 *       (PP (IN of) 
 *         (NP 
 *           (NP (NNP Elsevier) (NNP N.V.) )
 *           (, ,) 
 *           (NP (DT the) (NNP Dutch) (VBG publishing) (NN group) )))))
 *   (. .) ))
 *  
 * Code:
 * TBReader tbank = new TBReader("wsj_0001.mrg");
 * TBTree tree;
 *		
 * while ((tree = tbank.nextTree()) != null)
 *	System.out.println(tree.getWords());
 * 
 * Output:
 * Pierre Vinken , 61 years old , will join the board as a nonexecutive director Nov. 29 .
 * Mr. Vinken is chairman of Elsevier N.V. , the Dutch publishing group .
 * </pre>
 * @see TBTree
 * @author Jinho D. Choi
 * <b>Last update:</b> 02/05/2010
 */
public class TBReader
{
	JFileTokenizer scanner;
	int            treeCount;
	String         fileName;

	/**
	 * Initializes the Treebank reader.
	 * @param filename name of the Treebank file
	 * @throws FileNotFoundException 
	 */
	public TBReader(String fileName) throws FileNotFoundException
	{
		String delim  = TBLib.LRB + TBLib.RRB + JFileTokenizer.WHITE;
		scanner       = new JFileTokenizer(new FileReader(fileName), delim, true);
		treeCount     = 0;
		this.fileName = fileName;
	}
	
	public TBReader(String dirName, String fileName) throws FileNotFoundException
    {
        String delim  = TBLib.LRB + TBLib.RRB + JFileTokenizer.WHITE;
        scanner       = new JFileTokenizer(new FileReader(new File(dirName, fileName)), delim, true);
        treeCount     = 0;
        this.fileName = fileName;
    }
	
	
	public TBReader(Reader reader)
	{
		String delim = TBLib.LRB + TBLib.RRB + JFileTokenizer.WHITE;
		scanner      = new JFileTokenizer(reader, delim, true);
		treeCount   = 0;
		fileName     = null; 
	}
	
	/**
	 * Returns the next tree in the Treebank.
	 * If there is none, returns null.
	 * @throws TreeException 
	 */
	public TBTree nextTree() throws ParseException
	{
		String str;
		
		do
		{
			str = nextToken();
			if (str == null)	return null;
		}
		while (!str.equals(TBLib.LRB));
		
		Stack<List<TBNode>> childNodeStack = new Stack<List<TBNode>>();
		childNodeStack.push(new ArrayList<TBNode>());
		
		int terminalIndex = 0;
		int tokenIndex    = 0;
		TBNode head       = new TBNode(null, "FRAG");		// dummy-head
		TBNode curr       = head;						// pointer to the current node
		
		do
		{
			if ((str = nextToken()) == null)
				throw new ParseException("more tokens needed");
			System.out.println(str);
			
			if (str.equals(TBLib.LRB))
			{

				if ((str = nextToken()) == null)		// str = pos-tag
					throw new ParseException("POS-tag is missing");
				if (!TBNode.POS_PATTERN.matcher(str).matches())
				    throw new ParseException("Malformed POS tag: "+str);
				
				TBNode childNode = new TBNode(curr, str, (short)(childNodeStack.peek().size()));
				childNodeStack.peek().add(childNode);
				
				curr = childNode;                           // move to child
				childNodeStack.push(new ArrayList<TBNode>());
			}
			else if (str.equals(TBLib.RRB))
			{
				if (curr.terminalIndex<0)
				{
				    curr.terminalIndex = -(terminalIndex+1);
	                curr.tokenIndex = -(tokenIndex+1);
				}
				
				curr.children= childNodeStack.pop().toArray(TBNode.NO_CHILDREN);
				curr = curr.getParent();				// move to parent
				
			}
			else if (head==curr)
			{
				head.pos = str;
			}
			else
			{
			    if (!TBNode.WORD_PATTERN.matcher(str).matches())
			        throw new ParseException("Malformed word: "+str);
				curr.word = str;						// str = word
				curr.terminalIndex = terminalIndex++;
				if (!curr.isEC())	curr.tokenIndex = tokenIndex++;
			}
		}
		while (!childNodeStack.isEmpty());
		
		// omit the dummy head
		TBNode tmp = head.children.length==1?head.children[0]:head;
		
		tmp.parent=null;
		return new TBTree(fileName, treeCount++, tmp, terminalIndex, tokenIndex);
	}
	
	private String nextToken()
	{
		while (scanner.hasMoreTokens())
		{
			String str = scanner.nextToken();
			
			if (JFileTokenizer.WHITE.indexOf(str) == -1)
				return str;
		}
		return null;
	}

}
